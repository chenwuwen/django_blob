# Django项目部署uwsgi配置文件,本配置文件使用的uwsgi版本为2.0.14 使用其他版本,可能出现问题, 安装方式为 pip install uwsgi 安装前建议使用命令yum remove uwsgi移除系统的uwsgi
[uwsgi]

# 单独使用uwgi,不与NGINX结合使用的http端口,配置该项启动uwsgi,直接访问该接口即可,但貌似不处理静态文件
http = :8000

# uwsgi监听的socket，Nginx设置反向代理时需要转发到该地址[用nginx的时候就配socket , 直接运行的时候配 http]
socket = 127.0.0.1:8899

# 在app加载前切换到该目录，设置为Django项目根目录
chdir = /root/django_blog

module = django_blog.settings

# 加载指定的python WSGI模块，设置为Django项目的wsgi文件
wsgi-file = %(chdir)/django_blog/wsgi.py

# 启动一个master进程来管理其他进程
master = true

# 工作的进程数
processes = 4

# 每个进程下的线程数量
threads = 2

# 指定pid文件,有了pid进程文件,就可以通过 uwsgi --stop uwsgi.pid 停止当前uwsgi服务, uwsgi --reload uwsgi.pid 重启当前uwsgi服务
pidfile = %(chdir)/uwsgi.pid

# 在指定的地址上，开启状态服务,使用 uwsgi --connect-and-read uwsgi.status 这个命令返回一个json串，显示进程和worker的状态很详细
stats = %(chdir)/uwsgi.status

# 当服务器退出的时候自动删除unix socket文件和pid文件
vacuum = true

# 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器
daemonize = %(chdir)/blog.log

#设置pathon路径,当操作系统中存在多个python环境,或设置了虚拟环境时
pythonpath = /root/anaconda3/envs/python36/lib/python3.6/site-packages

#设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。这个配置会使在平滑地重启工作子进程中，如果工作进程结束时间超过了8秒就会被强行结束（忽略之前已经接收到的请求而直接结束）
reload-mercy = 8

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）。你可以使用这个选项来默默地对抗内存泄漏
max-requests = 5000

# 通过使用POSIX/UNIX的setrlimit()函数来限制每个uWSGI进程的虚拟内存使用数。这个配置会限制uWSGI的进程占用虚拟内存不超过256M。如果虚拟内存已经达到256M，并继续申请虚拟内存则会使程序报内存错误，本次的http请求将返回500错误,因此该配置在低配置服务器上需要慎用。
# limit-as = 256


# 以固定的文件大小（单位KB），切割日志文件
log-maxsize = 500000

# 日志大小，当大于这个大小会进行切分 (Byte)
# log-maxsize =

# 当启动时切分日志
#log-truncate = True

# 使用nginx用户,默认是以root用户启动uwsgi,但是会提示警告
# uid = nginx

# 使用nginx组,默认是以root用户启动uwsgi,但是会提示警告
# gid = nginx

#plugins=python
